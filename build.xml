<?xml version="1.0" encoding="UTF-8"?>
<project name="BedREST" default="build" basedir=".">
    <!-- Generate timestamp for use elsewhere -->
    <tstamp/>
    
    <!-- Load build properties -->
    <property file="build.properties" />
    
    <!-- Clean task -->
    <target name="clean" depends="clean-build, clean-test, clean-docs, clean-reports">
        
    </target>
    
    <!-- Base build task -->
    <target name="clean-build">
        <delete dir="${build.dir}" />
    </target>
    
    <target name="prepare-build">
        <mkdir dir="${build.dir}" />
    </target>
    
    <target name="build" depends="clean-build, prepare-build, php-lint, generate-docs, test">
        
    </target>
    
    <!-- PHPUnit test suites -->
    <target name="clean-test" description="Cleans up test folders.">
        <delete dir="${tests.reports.dir}" />
    </target>
    
    <target name="test" description="Runs all available tests" depends="clean-test">
        <mkdir dir="${tests.reports.dir}" />
        <mkdir dir="${tests.reports.logs}" />
        <mkdir dir="${tests.reports.report}" />
        <mkdir dir="${tests.reports.coverage}" />
        
        <coverage-setup database="${tests.reports.logs}coverage.xml">
            <fileset dir="${library.basedir}">
                <include name="${library.fileset}" />
            </fileset>
        </coverage-setup>
        
        <phpunit printsummary="true"
                 haltonfailure="false" 
                 haltonerror="false"
                 codecoverage="true"
                 bootstrap="tests/bootstrap.php">
            <formatter todir="${tests.reports.logs}" type="xml" />
            <formatter todir="${tests.reports.logs}" type="clover" outfile="clover.xml" />
            <batchtest>
                <fileset dir="${tests.dir}">
                    <include name="${tests.fileset}" />
                </fileset>
            </batchtest>
        </phpunit>
        
        <phpunitreport infile="${tests.reports.logs}testsuites.xml" 
                       format="frames" 
                       todir="${tests.reports.report}" />
        
        <coverage-report outfile="${tests.reports.logs}coverage.xml">
            <report todir="${tests.reports.coverage}" usesorttable="true" />
        </coverage-report>
    </target>
    
    <!-- API documentation -->
    <target name="api-doc" description="Generates the BedREST API Documentation">
        <mkdir dir="${docs.api.dir}" />
        
        <phpdoc2 title="BedREST API Documentation" destdir="${docs.api.dir}" template="responsive">
            <fileset dir="${library.basedir}">
                <include name="${library.fileset}" />
            </fileset>
        </phpdoc2>
    </target>
    
    <!-- Cleans all documentation -->
    <target name="clean-docs">
        <delete dir="${docs.dir}" />
    </target>
    
    <!-- Generate all documentation -->
    <target name="generate-docs" description="Generates all documentation" depends="clean-docs, api-doc">
        
    </target>
    
    <!-- PHP Lint -->
    <target name="php-lint" description="Run PHP Lint">
        <mkdir dir="${reports.phplint.dir}" />
        
        <phplint haltonfailure="false" tofile="${reports.phplint.dir}phplint.log">
            <fileset dir="${library.basedir}">
                <include name="${library.fileset}" />
            </fileset>
        </phplint>
    </target>
    
    <!-- PHP Mess Detector -->
    <target name="php-md" description="Run PHP Mess Detector">
        <mkdir dir="${reports.phpmd.dir}" />
        
        <phpmd rulesets="codesize,design,unusedcode">
            <fileset dir="${library.basedir}">
                <include name="${library.fileset}" />
            </fileset>
            
            <formatter type="xml" outfile="${reports.phpmd.dir}phpmd-report.xml" />
            <formatter type="html" outfile="${reports.phpmd.dir}phpmd-report.html" />
        </phpmd>
    </target>

    <!-- PHP Code Sniffer -->
    <target name="php-cs" description="Runs PHP Code Sniffer">
        <mkdir dir="${reports.phpcs.dir}" />
        
        <phpcodesniffer standard="PSR2" format="full"
                        docGenerator="HTML" docFile="${reports.phpcs.dir}phpcs-doc.html">
            <fileset dir="${library.basedir}">
                <include name="${library.fileset}" />
            </fileset>
            
            <fileset dir="${tests.dir}">
                <include name="*${tests.fileset}" />
            </fileset>
            
            <formatter type="full" outfile="${reports.phpcs.dir}phpcs-report.txt" />
            <formatter type="checkstyle" outfile="${reports.phpcs.dir}phpcs-checkstyle.xml" />
        </phpcodesniffer>
    </target>
    
    <!-- PHPLoc -->
    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="phploc">
            <arg value="--log-csv" />
            <arg value="${reports.dir}phploc.csv" />
            <arg path="${library.basedir}" />
        </exec>
    </target>
    
    <!-- Cleans all reports -->
    <target name="clean-reports">
        <delete dir="${reports.dir}" />
    </target>
    
    <!-- Generates all reports -->
    <target name="generate-reports" description="Generates all reports" depends="clean-reports, php-lint, php-cs, php-md, phploc">
        
    </target>
</project>
